let express,ApolloServer,gql,typeDefs,resolvers;_846‍.w("express",[["default",["express"],function(v){express=v}]]);_846‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_846‍.w("graphql-tag",[["gql",["gql"],function(v){gql=v}]]);_846‍.w("./graphql/typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_846‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);





const app =  express();
const PORT = process.env.PORT ? parseInt(process.env.PORT) : 8000;
const HOSTNAME = process.nextTick.HOSTNAME || '127.0.0.1';


async function startServer() {
    const server = new ApolloServer ({
        typeDefs,
        resolvers,
    });
    
    await server.start();
    
    server.applyMiddleware({
        app,
        cors: {
            origin: 'http://localhost:3000',
        },
        bodyParserConfig: true,
    });
};
    
startServer();
app.listen(PORT, HOSTNAME, () => {
    console.log(`Server is listening at http://${HOSTNAME}:${PORT}.`);
});



